Esta es mi primera guia para usar git

Autor: Lalo Jami
Alias: Honguito

#instalacion de git en linux
$ sudo apt-get install git

#Creacion de proyecto git
$git init //inicia un repositorio git vacio en el directorio donde se ejecuta el comando

#Saber el estado del archivo
$git status //nos dice el estado del proyecto, siempre hay que estar pendiente de los cambios, es recomendable ejecutarlos antes de hacer un commit

#remove
$git rm <name_file>
$git rm --cached <name_file> //el usar este comando con (--cached) lo que hace es eliminar la version del archivo (mas no el archivo) de la memoria ram
//de esta forma se puede eliminar la version antes de hacer commit al repositorio

#Configuracion del usuario
$git config --global user.name "user_name"  //Configuracion del nombre de usuario
$git config --global user.email "user_email" //Configuracion del correo del usuario
#Hacer los primeros commits
$git commit -m "mensaje" //subir los cambios al repositorio, es de buenas practicas el dejar un mensaje explicando los cambios que se realizo
$git commit -am "mensaje" //guarda en stage y hace commit de una vez, solo funciona con archivos hechos git add anteriormente


#revisar la historia del archivo
$git log <name_file> //historia del los commits, nos muestra los tags
$git show <name_file> //nos muestra los ultimos cambios hechos en el archivo
$git diff <tag_name_file_v.a> <tag_name_file_v.b> //comparacion de los distintos commits hechos
$git diff //usar solo este comando me da los cambios que se hizo en staging y los cambios hechos en el disco duro

#recupera antiguas versiones
$git reset <tag_name_file_v> //nos permite volver a una version anterior
#hay dos tipos de reset
$git reset <tag_name_file_v> --hard //Todo vuelve al estado anterior
$git reset <tag_name_file_v> --solf //volvemos al estado anterior pero lo que tenemos en staging sigue en staging
#que es staging? --> es el estado del archivo o archivos donde le hemos dado el comando (git add .) es decir tenemos un estado listo para hacer commit
#tambien tenemos
$git reset HEAD //Sacamos los archivos del area del staging, No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no
//se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto

#Revisar antiguas versiones
$git checkout <tag_name_file_v> <name_file>//nos trae la version anterior del archivo y nos lo pone en staging
$git checkout master <name_file>//regresamos a la version del master
#!!!importante, si realizamos un checkout, modificamos, hacemos add y commit crearemos una nueva version del archivo
//diferencia entre checkout y reset:
-checkout: nos permite mirar anteriores versiones, editarlas, y volver a la version master
-reset: volvemos a la version anterior sin la posibilidad de regresar a las futuras versiones
#!!!SOLO SE DEBE USAR RESET EN CASO DE EMERGENCIA


#Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

#merge
/*el merge es la fusion de dos ramas de git, donde une los ultimos cambios de la rama principal
con los ultimos cambios de otra rama con la que se desea hacer el merge. Esto se debe hacer en la rama que se desea se quede
guardado los cambios (por lo general es la rama principal MASTER)*/
