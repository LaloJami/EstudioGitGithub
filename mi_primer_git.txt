Esta es mi primera guia para usar git,
Ahora estoy usando desde windows con la terminal de linux

Autor: Lalo Jami
Alias: Honguito

#instalacion de git en linux
$ sudo apt-get install git

#Creacion de proyecto git
$git init //inicia un repositorio git vacio en el directorio donde se ejecuta el comando

#Saber el estado del archivo
$git status //nos dice el estado del proyecto, siempre hay que estar pendiente de los cambios, es recomendable ejecutarlos antes de hacer un commit

#remove
$git rm <name_file>
$git rm --cached <name_file> //el usar este comando con (--cached) lo que hace es eliminar la version del archivo (mas no el archivo) de la memoria ram
//de esta forma se puede eliminar la version antes de hacer commit al repositorio

#Configuracion del usuario
$git config --global user.name "user_name"  //Configuracion del nombre de usuario
$git config --global user.email "user_email" //Configuracion del correo del usuario
#Hacer los primeros commits
$git commit -m "mensaje" //subir los cambios al repositorio, es de buenas practicas el dejar un mensaje explicando los cambios que se realizo
$git commit -am "mensaje" //guarda en stage y hace commit de una vez, solo funciona con archivos hechos git add anteriormente


#revisar la historia del archivo
$git log <name_file> //historia del los commits, nos muestra los tags
$git show <name_file> //nos muestra los ultimos cambios hechos en el archivo
$git diff <tag_name_file_v.a> <tag_name_file_v.b> //comparacion de los distintos commits hechos
$git diff //usar solo este comando me da los cambios que se hizo en staging y los cambios hechos en el disco duro

#recupera antiguas versiones
$git reset <tag_name_file_v> //nos permite volver a una version anterior
#hay dos tipos de reset
$git reset <tag_name_file_v> --hard //Todo vuelve al estado anterior
$git reset <tag_name_file_v> --solf //volvemos al estado anterior pero lo que tenemos en staging sigue en staging
#que es staging? --> es el estado del archivo o archivos donde le hemos dado el comando (git add .) es decir tenemos un estado listo para hacer commit
#tambien tenemos
$git reset HEAD //Sacamos los archivos del area del staging, No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no
//se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto

#Revisar antiguas versiones
$git checkout <tag_name_file_v> <name_file>//nos trae la version anterior del archivo y nos lo pone en staging
$git checkout master <name_file>//regresamos a la version del master
#!!!importante, si realizamos un checkout, modificamos, hacemos add y commit crearemos una nueva version del archivo
//diferencia entre checkout y reset:
-checkout: nos permite mirar anteriores versiones, editarlas, y volver a la version master
-reset: volvemos a la version anterior sin la posibilidad de regresar a las futuras versiones
#!!!SOLO SE DEBE USAR RESET EN CASO DE EMERGENCIA


#Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

#Creacion de nueva rama y cambio de ramas
$git branch <branch_name> //nos crea una nueva rama,copia todos los archivos de la rama actual
$git checkout <branch_name> //cambia de rama
$git branch //nos lista las ramas que tiene el proyecto
# para eliminar una rama es con el comando
$git branch -D <branch_name>

#merge
/*el merge es la fusion de dos ramas de git, donde une los ultimos cambios de la rama principal
con los ultimos cambios de otra rama con la que se desea hacer el merge. Esto se debe hacer en la rama que se desea se quede
guardado los cambios (por lo general es la rama principal MASTER)*/
$git checkout <branch_name>

#vinculacion con github
/*Una vez creado una cuenta de github y creado en esta un repositorio, dentro de este nos aparecera
la opcion <Code>, donde vamos a copiar el https que es la direccion de nuestro repositorio en github y lo vamos a enlazar
a nuestro repositorio git*/
$git remote add origin <url> //agregamos la url a nuestro git 
$git remote //nos deja visualizar todos los repositorios que tenemos, en este caso tenemos uno con el nombre origin
$git remote -v //nos dice si tenemos acciones que podemos hacer con nuestro repositorio a remote 
/*
-fetch: traernos cosas
-push: Enviar cosas
-remote: nos referimos a remote al repositorio en github
*/
$git pull origin main --allow-unrelated-histories //esto es al inicio, se lo ocupa porque cuando se crea un repositorio github
//este tiene una historia de commits distinta de git y viceversa, por ende no estan relacionados los commits y este comando permite crear esa relacion 
$git pull origin main //nos trae todos los cambios guardados en el remote

$git push origin master:main //Mandamos los cambios hechos en nuestra maquina hacia remote 
/*NOTA: no podemos hacer un push sin antes haber realizado un pull*/

#Configurar el SSH en local

Primer paso: Generar tus llaves SSH. Recuerda que es muy buena idea proteger tu llave privada con una contraseña.
ssh-keygen -t rsa -b 4096 -C "tu@email.com"
# Encender el "servidor" de llaves SSH de tu computadora: 
eval $(ssh-agent -s)

# Añadir tu llave SSH a este "servidor":
ssh-add ruta-donde-guardaste-tu-llave-privada

#Conexión a GitHub con SSH

Luego de crear nuestras llaves SSH podemos entregarle la llave pública a GitHub para comunicarnos de forma segura y sin necesidad de escribir nuestro usuario y contraseña todo el tiempo.

Para esto debes entrar a la Configuración de Llaves SSH en GitHub, crear una nueva llave con el nombre que le quieras dar y el contenido de la llave pública de tu computadora.

Ahora podemos actualizar la URL que guardamos en nuestro repositorio remoto, solo que, en vez de guardar la URL con HTTPS, vamos a usar la URL con SSH:

$git remote set-url origin url-ssh-del-repositorio-en-github

#Tags y versiones en Git y GitHub

Los tags o etiquetas nos permiten asignar versiones a los commits con cambios más importantes o significativos de nuestro proyecto.

Comandos para trabajar con etiquetas:

    Crear un nuevo tag y asignarlo a un commit: git tag -a nombre-del-tag id-del-commit.
    Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
    Listar los tags de nuestro repositorio local: git tag o git show-ref --tags.
    Publicar un tag en el repositorio remoto: git push origin --tags.
    Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag.


    Git nunca olvida, git reflog
Git guarda todos los cambios aunque decidas borrarlos, al borrar un cambio lo que estás haciendo sólo es actualizar la punta del branch, para gestionar éstas puntas existe un mecanismo llamado registros de referencia o reflogs.
.
La gestión de estos cambios es mediante los hash’es de referencia (o ref) que son apuntadores a los commits.
.
Los recoges registran cuándo se actualizaron las referencias de Git en el repositorio local (sólo en el local), por lo que si deseas ver cómo has modificado la historia puedes utilizar el comando:

git reflog
Muchos comandos de Git aceptan un parámetro para especificar una referencia o “ref”, que es un puntero a una confirmación sobre todo los comandos:

git checkout Puedes moverte sin realizar ningún cambio al commit exacto de la ref

git checkout eff544f
git reset: Hará que el último commit sea el pasado por la ref, usar este comando sólo si sabes exactamente qué estás haciendo

git reset --hard eff544f # Perderá todo lo que se encuentra en staging y en el Working directory y se moverá el head al commit eff544f
git reset --soft eff544f # Te recuperará todos los cambios que tengas diferentes al commit eff544f, los agregará al staging area y moverá el head al commit eff544f
git merge: Puedes hacer merge de un commit en específico, funciona igual que con una branch, pero te hace el merge del estado específico del commit mandado

git checkout master
git merge eff544f # Fusionará en un nuevo commit la historia de master con el momento específico en el que vive eff544f


#busqueda de palabras en el proyecto
git grep color -->use la palabra color
git grep la --> donde use la palabra la
git grep -n color–> en que lineas use la palabra color
git grep -n platzi --> en que lineas use la palabra platzi
git grep -c la --> cuantas veces use la palabra la
git grep -c paltzi --> cuantas veces use la palabra platzi
git grep -c “<p>”–> cuantas veces use la etiqueta <p>

git log-S “cabecera” --> cuantas veces use la palabra cabecera en
todos los commits.

grep–> para los archivos
log --> para los commits.

#Comandos y recursos colaborativos en Git y GitHub

git shortlog -sn = muestra cuantos commit han hecho cada miembros del equipo.
git shortlog -sn --all = muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado
git shortlog -sn --all --no-merge = muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges
git blame ARCHIVO = muestra quien hizo cada cosa linea por linea
git COMANDO --help = muestra como funciona el comando.
git blame ARCHIVO -Llinea_inicial,linea_final= muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50
**git branch -r **= se muestran todas las ramas remotas
git branch -a = se muestran todas las ramas tanto locales como remotas